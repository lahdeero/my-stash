{"version":3,"sources":["reducers/userReducer.js","reducers/noteReducer.js","reducers/notificationReducer.js","reducers/index.js","index.js"],"names":["userReducer","store","arguments","length","undefined","action","type","data","noteReducer","concat","map","note","id","filter","notificationReducer","combineReducers","user","notes","notification","createStore","rootReducer","applyMiddleware","thunk","ReactDOM","render","React","createElement","BrowserRouter","Provider","App","document","getElementById"],"mappings":"wKAwDeA,kBArDK,WAA0B,IAAzBC,EAAyBC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAjB,KAAMG,EAAWH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAC5C,OAAQC,EAAOC,MACb,IAAK,WAEL,IAAK,QACH,OAAgBD,EAAOE,KACzB,IAAK,SACH,OAAgB,KAClB,QACE,OAAON,KCsEEO,EAhFK,WAAwB,IAAvBP,EAAuBC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAf,GAAIG,EAAWH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAC1C,OAAQC,EAAOC,MACb,IAAK,SACH,OAAOL,EAAMQ,OAAOJ,EAAOE,MAC7B,IAAK,SACH,OAAON,EAAMS,IAAI,SAAAC,GAAI,OAAKA,EAAKC,KAAOP,EAAOE,KAAK,GAAGK,GAAMP,EAAOE,KAAK,GAAKI,IAC9E,IAAK,SACH,OAAOV,EAAMY,OAAO,SAAAF,GAAI,OAAIA,EAAKC,KAAOP,EAAOE,OACjD,IAAK,aACH,OAAOF,EAAOE,KAChB,IAAK,QACH,MAAgB,GAClB,QACE,OAAON,IC4BEa,EA3Ca,WAAyB,IAAxBb,EAAwBC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAhB,IAAKG,EAAWH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EACnD,OAAQC,EAAOC,MACb,IAAK,SAGL,IAAK,QAEH,MAAO,CADPL,EAAQI,EAAOE,KACAF,EAAOE,MACxB,IAAK,oBAGL,IAAK,aAEH,OADAN,EAAQ,GAEV,QACE,OAAOA,ICVEc,cAAgB,CAC7BC,OACAC,QACAC,iBCHIjB,EAAQkB,YAAYC,EAAaC,YAAgBC,MAGvDC,IAASC,OACPC,MAAAC,cAACC,cAAD,KACEF,MAAAC,cAACE,SAAD,CAAU3B,MAAOA,GACfwB,MAAAC,cAACG,IAAD,QAGJC,SAASC,eAAe","file":"static/js/main.8a5a6864.chunk.js","sourcesContent":["import loginService from '../services/LoginService'\nimport noteService from '../services/NoteService'\n\nconst userReducer = (store = null, action) => {\n  switch (action.type) {\n    case 'REGISTER':\n      return (store = action.data)\n    case 'LOGIN':\n      return (store = action.data)\n    case 'LOGOUT':\n      return (store = null)\n    default:\n      return store\n  }\n}\n\nexport const actionForRegister = (information) => {\n  return async () => {\n    const tokenAndMessage = await loginService.register(information)\n    return tokenAndMessage\n  }\n}\n\nexport const setLogin = (user) => {\n  noteService.setToken(user.id, user.token)\n  return async (dispatch) => {\n    dispatch({\n      type: 'LOGIN',\n      data: user\n    })\n  }\n}\n\nexport const actionForLogin = (creditentals) => {\n  return async (dispatch) => {\n    const user = await loginService.login(creditentals)\n    noteService.setToken(user.id, user.token)\n    await window.localStorage.setItem('loggedMystashappUser', JSON.stringify(user))\n    dispatch({\n      type: 'LOGIN',\n      data: user\n    })\n    // console.log(user)\n    return user\n  }\n}\n\nexport const actionForLogout = () => {\n  return async (dispatch) => {\n    dispatch({\n      type: 'LOGOUT',\n      data: null\n    })\n  }\n}\n\nexport default userReducer\n","import noteService from '../services/NoteService.js'\n\nconst noteReducer = (store = [], action) => {\n  switch (action.type) {\n    case 'CREATE':\n      return store.concat(action.data)\n    case 'MODIFY':\n      return store.map(note => (note.id === action.data[0].id) ? action.data[0] : note)\n    case 'REMOVE':\n      return store.filter(note => note.id !== action.data)\n    case 'INIT_NOTES':\n      return action.data\n    case 'CLEAR':\n      return (store = [])\n    default:\n      return store\n  }\n}\n\nexport const noteInitialization = () => {\n  return async (dispatch) => {\n    const notes = await noteService.getAll()\n    dispatch({\n      type: 'INIT_NOTES',\n      data: notes\n    })\n  }\n}\n\nexport const clearNotes = () => {\n  return async (dispatch) => {\n    dispatch({\n      type: 'CLEAR',\n      data: []\n    })\n  }\n}\n\nexport const createButDontSave = (noteObject) => {\n  console.log(noteObject)\n  return async (dispatch) => {\n    dispatch({\n      type: 'CREATE',\n      data: noteObject\n    })\n  }\n}\n\nexport const createNote = (noteObject) => {\n  return async (dispatch) => {\n    const savedNoteObject = await noteService.create(noteObject)\n    console.log(savedNoteObject[0])\n    dispatch({\n      type: 'CREATE',\n      data: savedNoteObject[0]\n    })\n    return savedNoteObject[0].id\n  }\n}\n\nexport const modifyNote = (noteObject) => {\n  return async (dispatch) => {\n    await noteService.modify(noteObject)\n    const modifiedNoteObject = await noteService.getOne(noteObject.id)\n    await dispatch({\n      type: 'MODIFY',\n      data: modifiedNoteObject\n    })\n  }\n}\n\nexport const removeNote = (id) => {\n  return async (dispatch) => {\n    const delId = await noteService.erase(id)\n    dispatch({\n      type: 'REMOVE',\n      data: id\n    })\n    return delId\n  }\n}\n\nexport default noteReducer\n","const notificationReducer = (store = ' ', action) => {\n  switch (action.type) {\n    case 'NOTIFY':\n      store = action.data\n      return [store, action.data]\n    case 'ERROR':\n      store = action.data\n      return [store, action.data]\n    case 'HIDE_NOTIFICATION':\n      store = ''\n      return store\n    case 'HIDE_ERROR':\n      store = ''\n      return store\n    default:\n      return store\n  }\n}\n\nexport const notify = (notification, timer) => {\n  return async (dispatch) => {\n    dispatch({\n      type: 'NOTIFY',\n      data: notification\n    })\n    setTimeout(() => {\n      dispatch({ type: 'HIDE_NOTIFICATION' })\n    }, timer * 1000)\n  }\n}\n\nexport const errormessage = (notification, timer) => {\n  return async (dispatch) => {\n    dispatch({\n      type: 'ERROR',\n      data: notification\n    })\n    setTimeout(() => {\n      dispatch({ type: 'HIDE_ERROR' })\n    }, timer * 1000)\n  }\n}\n\nexport default notificationReducer\n","import { combineReducers } from 'redux'\nimport user from './userReducer'\nimport notes from './noteReducer'\nimport notification from './notificationReducer'\n\nexport default combineReducers({\n  user,\n  notes,\n  notification\n})\n","import ReactDOM from 'react-dom'\nimport { createStore, applyMiddleware } from 'redux'\nimport thunk from 'redux-thunk'\nimport rootReducer from './reducers'\n\nconst store = createStore(rootReducer, applyMiddleware(thunk))\n// const store = createStore(rootReducer)\n\nReactDOM.render(\n  <BrowserRouter>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </BrowserRouter>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}